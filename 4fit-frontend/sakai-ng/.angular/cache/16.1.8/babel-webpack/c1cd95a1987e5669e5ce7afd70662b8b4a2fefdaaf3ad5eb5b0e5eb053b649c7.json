{"ast":null,"code":"var _class;\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"src/app/demo/service/node.service\";\nimport * as i2 from \"@angular/common\";\nimport * as i3 from \"primeng/tree\";\nimport * as i4 from \"primeng/api\";\nimport * as i5 from \"primeng/treetable\";\nfunction TreeDemoComponent_ng_template_11_th_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"th\");\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const col_r4 = ctx.$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", col_r4.header, \" \");\n  }\n}\nfunction TreeDemoComponent_ng_template_11_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"tr\");\n    i0.ɵɵtemplate(1, TreeDemoComponent_ng_template_11_th_1_Template, 2, 1, \"th\", 8);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const columns_r2 = ctx.$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngForOf\", columns_r2);\n  }\n}\nfunction TreeDemoComponent_ng_template_12_td_1_p_treeTableToggler_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"p-treeTableToggler\", 11);\n  }\n  if (rf & 2) {\n    const rowNode_r5 = i0.ɵɵnextContext(2).$implicit;\n    i0.ɵɵproperty(\"rowNode\", rowNode_r5);\n  }\n}\nfunction TreeDemoComponent_ng_template_12_td_1_p_treeTableCheckbox_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"p-treeTableCheckbox\", 12);\n  }\n  if (rf & 2) {\n    const rowNode_r5 = i0.ɵɵnextContext(2).$implicit;\n    i0.ɵɵproperty(\"value\", rowNode_r5);\n  }\n}\nfunction TreeDemoComponent_ng_template_12_td_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"td\");\n    i0.ɵɵtemplate(1, TreeDemoComponent_ng_template_12_td_1_p_treeTableToggler_1_Template, 1, 1, \"p-treeTableToggler\", 9);\n    i0.ɵɵtemplate(2, TreeDemoComponent_ng_template_12_td_1_p_treeTableCheckbox_2_Template, 1, 1, \"p-treeTableCheckbox\", 10);\n    i0.ɵɵtext(3);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const col_r9 = ctx.$implicit;\n    const i_r10 = ctx.index;\n    const rowData_r6 = i0.ɵɵnextContext().rowData;\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", i_r10 === 0);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", i_r10 === 0);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", rowData_r6[col_r9.field], \" \");\n  }\n}\nfunction TreeDemoComponent_ng_template_12_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"tr\");\n    i0.ɵɵtemplate(1, TreeDemoComponent_ng_template_12_td_1_Template, 4, 3, \"td\", 8);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const columns_r7 = ctx.columns;\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngForOf\", columns_r7);\n  }\n}\nexport class TreeDemoComponent {\n  constructor(nodeService) {\n    this.nodeService = nodeService;\n    this.files1 = [];\n    this.files2 = [];\n    this.files3 = [];\n    this.selectedFiles1 = [];\n    this.selectedFiles2 = [];\n    this.selectedFiles3 = {};\n    this.cols = [];\n  }\n  ngOnInit() {\n    this.nodeService.getFiles().then(files => this.files1 = files);\n    this.nodeService.getFilesystem().then(files => this.files2 = files);\n    this.nodeService.getFiles().then(files => {\n      this.files3 = [{\n        label: 'Root',\n        children: files\n      }];\n    });\n    this.cols = [{\n      field: 'name',\n      header: 'Name'\n    }, {\n      field: 'size',\n      header: 'Size'\n    }, {\n      field: 'type',\n      header: 'Type'\n    }];\n  }\n}\n_class = TreeDemoComponent;\n_class.ɵfac = function TreeDemoComponent_Factory(t) {\n  return new (t || _class)(i0.ɵɵdirectiveInject(i1.NodeService));\n};\n_class.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: _class,\n  selectors: [[\"ng-component\"]],\n  decls: 18,\n  vars: 7,\n  consts: [[1, \"grid\"], [1, \"col-12\"], [1, \"card\"], [\"selectionMode\", \"checkbox\", 3, \"value\", \"selection\", \"selectionChange\"], [\"selectionMode\", \"checkbox\", 3, \"value\", \"columns\", \"selection\", \"selectionChange\"], [\"pTemplate\", \"header\"], [\"pTemplate\", \"body\"], [\"layout\", \"horizontal\", \"selectionMode\", \"single\", 3, \"value\", \"selection\", \"selectionChange\"], [4, \"ngFor\", \"ngForOf\"], [3, \"rowNode\", 4, \"ngIf\"], [3, \"value\", 4, \"ngIf\"], [3, \"rowNode\"], [3, \"value\"]],\n  template: function TreeDemoComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"div\", 0)(1, \"div\", 1)(2, \"div\", 2)(3, \"h5\");\n      i0.ɵɵtext(4, \"Tree\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(5, \"p-tree\", 3);\n      i0.ɵɵlistener(\"selectionChange\", function TreeDemoComponent_Template_p_tree_selectionChange_5_listener($event) {\n        return ctx.selectedFiles1 = $event;\n      });\n      i0.ɵɵelementEnd()()();\n      i0.ɵɵelementStart(6, \"div\", 1)(7, \"div\", 2)(8, \"h5\");\n      i0.ɵɵtext(9, \"TreeTable\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(10, \"p-treeTable\", 4);\n      i0.ɵɵlistener(\"selectionChange\", function TreeDemoComponent_Template_p_treeTable_selectionChange_10_listener($event) {\n        return ctx.selectedFiles2 = $event;\n      });\n      i0.ɵɵtemplate(11, TreeDemoComponent_ng_template_11_Template, 2, 1, \"ng-template\", 5);\n      i0.ɵɵtemplate(12, TreeDemoComponent_ng_template_12_Template, 2, 1, \"ng-template\", 6);\n      i0.ɵɵelementEnd()()();\n      i0.ɵɵelementStart(13, \"div\", 1)(14, \"div\", 2)(15, \"h5\");\n      i0.ɵɵtext(16, \"Horizontal Tree\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(17, \"p-tree\", 7);\n      i0.ɵɵlistener(\"selectionChange\", function TreeDemoComponent_Template_p_tree_selectionChange_17_listener($event) {\n        return ctx.selectedFiles3 = $event;\n      });\n      i0.ɵɵelementEnd()()()();\n    }\n    if (rf & 2) {\n      i0.ɵɵadvance(5);\n      i0.ɵɵproperty(\"value\", ctx.files1)(\"selection\", ctx.selectedFiles1);\n      i0.ɵɵadvance(5);\n      i0.ɵɵproperty(\"value\", ctx.files2)(\"columns\", ctx.cols)(\"selection\", ctx.selectedFiles2);\n      i0.ɵɵadvance(7);\n      i0.ɵɵproperty(\"value\", ctx.files3)(\"selection\", ctx.selectedFiles3);\n    }\n  },\n  dependencies: [i2.NgForOf, i2.NgIf, i3.Tree, i4.PrimeTemplate, i5.TreeTable, i5.TreeTableToggler, i5.TTCheckbox],\n  encapsulation: 2\n});","map":{"version":3,"names":["i0","ɵɵelementStart","ɵɵtext","ɵɵelementEnd","ɵɵadvance","ɵɵtextInterpolate1","col_r4","header","ɵɵtemplate","TreeDemoComponent_ng_template_11_th_1_Template","ɵɵproperty","columns_r2","ɵɵelement","rowNode_r5","TreeDemoComponent_ng_template_12_td_1_p_treeTableToggler_1_Template","TreeDemoComponent_ng_template_12_td_1_p_treeTableCheckbox_2_Template","i_r10","rowData_r6","col_r9","field","TreeDemoComponent_ng_template_12_td_1_Template","columns_r7","TreeDemoComponent","constructor","nodeService","files1","files2","files3","selectedFiles1","selectedFiles2","selectedFiles3","cols","ngOnInit","getFiles","then","files","getFilesystem","label","children","ɵɵdirectiveInject","i1","NodeService","selectors","decls","vars","consts","template","TreeDemoComponent_Template","rf","ctx","ɵɵlistener","TreeDemoComponent_Template_p_tree_selectionChange_5_listener","$event","TreeDemoComponent_Template_p_treeTable_selectionChange_10_listener","TreeDemoComponent_ng_template_11_Template","TreeDemoComponent_ng_template_12_Template","TreeDemoComponent_Template_p_tree_selectionChange_17_listener"],"sources":["C:\\Users\\USUARIO\\Desktop\\CURSO EM VÍDEO\\4Fit\\4fit-frontend\\sakai-ng\\src\\app\\demo\\components\\uikit\\tree\\treedemo.component.ts","C:\\Users\\USUARIO\\Desktop\\CURSO EM VÍDEO\\4Fit\\4fit-frontend\\sakai-ng\\src\\app\\demo\\components\\uikit\\tree\\treedemo.component.html"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\r\nimport { NodeService } from 'src/app/demo/service/node.service';\r\nimport { TreeNode} from 'primeng/api';\r\n\r\n@Component({\r\n    templateUrl: './treedemo.component.html'\r\n})\r\nexport class TreeDemoComponent implements OnInit {\r\n\r\n    files1: TreeNode[] = [];\r\n\r\n    files2: TreeNode[] = [];\r\n\r\n    files3: TreeNode[] = [];\r\n\r\n    selectedFiles1: TreeNode[] = [];\r\n\r\n    selectedFiles2: TreeNode[] = [];\r\n\r\n    selectedFiles3: TreeNode = {};\r\n\r\n    cols: any[] = [];\r\n\r\n    constructor(private nodeService: NodeService) {}\r\n\r\n    ngOnInit() {\r\n        this.nodeService.getFiles().then(files => this.files1 = files);\r\n        this.nodeService.getFilesystem().then(files => this.files2 = files);\r\n        this.nodeService.getFiles().then(files => {\r\n            this.files3 = [{\r\n                label: 'Root',\r\n                children: files\r\n            }];\r\n        });\r\n\r\n        this.cols = [\r\n            { field: 'name', header: 'Name' },\r\n            { field: 'size', header: 'Size' },\r\n            { field: 'type', header: 'Type' }\r\n        ];\r\n    }\r\n}\r\n","<div class=\"grid\">\r\n\t<div class=\"col-12\">\r\n\t\t<div class=\"card\">\r\n\t\t\t<h5>Tree</h5>\r\n\t\t\t<p-tree [value]=\"files1\" selectionMode=\"checkbox\" [(selection)]=\"selectedFiles1\"></p-tree>\r\n\t\t</div>\r\n\t</div>\r\n\t<div class=\"col-12\">\r\n\t\t<div class=\"card\">\r\n\t\t\t<h5>TreeTable</h5>\r\n\t\t\t<p-treeTable [value]=\"files2\" [columns]=\"cols\" selectionMode=\"checkbox\" [(selection)]=\"selectedFiles2\">\r\n\t\t\t\t<ng-template pTemplate=\"header\" let-columns>\r\n\t\t\t\t\t<tr>\r\n\t\t\t\t\t\t<th *ngFor=\"let col of columns\">\r\n\t\t\t\t\t\t\t{{col.header}}\r\n\t\t\t\t\t\t</th>\r\n\t\t\t\t\t</tr>\r\n\t\t\t\t</ng-template>\r\n\t\t\t\t<ng-template pTemplate=\"body\" let-rowNode let-rowData=\"rowData\" let-columns=\"columns\">\r\n\t\t\t\t\t<tr>\r\n\t\t\t\t\t\t<td *ngFor=\"let col of columns; let i = index\">\r\n\t\t\t\t\t\t\t<p-treeTableToggler [rowNode]=\"rowNode\" *ngIf=\"i === 0\"></p-treeTableToggler>\r\n\t\t\t\t\t\t\t<p-treeTableCheckbox [value]=\"rowNode\" *ngIf=\"i === 0\"></p-treeTableCheckbox>\r\n\t\t\t\t\t\t\t{{rowData[col.field]}}\r\n\t\t\t\t\t\t</td>\r\n\t\t\t\t\t</tr>\r\n\t\t\t\t</ng-template>\r\n\t\t\t</p-treeTable>\r\n\t\t</div>\r\n\t</div>\r\n\t<div class=\"col-12\">\r\n\t\t<div class=\"card\">\r\n\t\t\t<h5>Horizontal Tree</h5>\r\n\t\t\t<p-tree [value]=\"files3\" layout=\"horizontal\" selectionMode=\"single\" [(selection)]=\"selectedFiles3\"></p-tree>\r\n\t\t</div>\r\n\t</div>\r\n</div>\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}